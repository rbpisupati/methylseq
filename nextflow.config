/*
 * -------------------------------------------------
 *  nf-core/methylseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  genome = false
  reads = "data/*_R{1,2}.fastq.gz"
  single_end = false
  aligner = 'bismark'
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  rrbs = false
  pbat = false
  single_cell = false
  epignome = false
  accel = false
  zymo = false
  cegx = false
  comprehensive = false
  cytosine_report = false
  ignore_flags = false
  meth_cutoff = false
  methyl_kit = false
  min_depth = 0
  skip_deduplication = false
  non_directional = false
  skip_trimming = false
  outdir = './results'
  save_align_intermeds = false
  known_splices = false
  slamseq = false
  local_alignment = false
  save_reference = false
  save_trimmed = false
  unmapped = false
  relax_mismatches = false
  num_mismatches = 0.6
  // 0.6 will allow a penalty of bp * -0.6
  // For 100bp reads, this is -60. Mismatches cost -6, gap opening -5 and gap extension -2
  // So -60 would allow 10 mismatches or ~ 8 x 1-2bp indels
  // Bismark default is 0.2 (L,0,-0.2), Bowtie2 default is 0.6 (L,0,-0.6)
  bismark_align_cpu_per_multicore = null
  bismark_align_mem_per_multicore = null

  // input options required for methylpy
  file_ext = 'bam'
  umeth = "ChrC:"

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  params.project = false
  params.clusterOptions = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/methylseq:1.5'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  aws { includeConfig 'conf/aws.config' }
  conda { 
    process.module = ['anaconda3/2019.10']
    // process.conda = "$baseDir/environment.yml" 
    process.conda = "$HOME/.conda/envs/nf-core-methylseq-1.5"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
      docker.enabled = true
      // Avoid this error:
      //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
      // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
      // once this is established and works well, nextflow might implement this behavior as new default.
      docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
      singularity.enabled = true
      singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/methylseq'
  author = 'Phil Ewels'
  homePage = 'https://github.com/nf-core/methylseq'
  description = 'Methylation (Bisulfite-Sequencing) Best Practice analysis pipeline, part of the nf-core community.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.5'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
